?any
samplecube
library(sampling)
samplecube
fastflightphase
fastflightcube
devtools::load_all()
pik <- matrix(c(0.6,0.3,0.3,
res <- Spot(pik, coord, EPS = 1e-6)
pik <- matrix(c(0.6,0.3,0.3,
0.2,0.4,0.9,
0.3,0.2,0.5,
0.9,0.1,0.3), ncol = 3, byrow = TRUE)
res <- Spot(pik, coord, EPS = 1e-6)
Sys.time
Sys.time()
start_time <- Sys.time()
end_time <- Sys.time()
end_time-start_time
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
devtools::load_all()
devtools::load_all()
res <- Orfs(pik, EPS = 1e-6)
res <- Orfs(pik, EPS = 1e-6)
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
res <- Orfs(pik, EPS = 1e-6)
roxygen2::document()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::build_manual()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::load_all()
devtools::build_manual()
devtools::load_all()
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
rm(list=ls())
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
?SpotSampling::PM
?SpotSampling:::PM
?SpotSampling:::UpdatePairs
?UpdatePairs
?pm
?PM
devtools::load_all(".")
roxygen2::roxygenize()
devtools::build_manual()
roxygen2::roxygenise()
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
## Coordinates in two dimensions of 4 units ##
coord <- matrix(c(0.5,0.6,0.2,0.3,0.8,0.9,0.4,0.7), ncol=2)
## Temporal inclusion probabilities with 3 waves and 4 units ##
pik <- matrix(c(0.6,0.3,0.3,
0.2,0.4,0.9,
0.3,0.2,0.5,
0.9,0.1,0.3), ncol = 3, byrow = TRUE)
res <- Spot(pik, coord, EPS = 1e-6)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
coord <- matrix(c(0.5,0.6,0.2,0.3,0.8,0.9,0.4,0.7), ncol=2)
res <- Spot(pik, coord, EPS = 1e-6)
res
roxygen2::roxygenise()
devtools::load_all()
res <- Spot(pik, coord, EPS = 1e-6)
res <- Spot(pik, coord, EPS = 1e-6)
devtools::build_manual()
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
?BalancedSampling::flightphase
runif(1)
roxygen2::roxygenise()
devtools::build_manual()
B  <- matrix(sample(c(0,0,0,1),80,replace=TRUE), nrow = 8, ncol =  10)
sums_col <- colSums(B)
sums_row <- rowSums(B)
BB       <- B
ind_col  <- seq(1, ncol(BB), 1)
ind_row  <- seq(1, nrow(BB), 1)
B
set.seed(1)
B  <- matrix(sample(c(0,0,0,1),80,replace=TRUE), nrow = 8, ncol =  10)
B
seq(1, ncol(BB), 1)
1:ncol(BB)
ReducedMatrix(B)
ReducedMatrix <- function(B){
EPS      <- 1e-8
sums_col <- colSums(B)
sums_row <- rowSums(B)
BB       <- B
# loop while any colsums equal to 0 exists
while(any(sums_col < abs(EPS))){
# extract columns with sum larger than 0
col <- which(sums_col > abs(EPS))
if(length(col) <= 1){ break }
BB      <- BB[,col]
ind_col <- (1:ncol(BB))[col]
# extract rows with sum larger than 0
sums_row <- rowSums(BB)
row      <- which(sums_row > abs(EPS))
if(length(row) <= 1){ break }
BB       <- BB[row,]
ind_row  <- (1:nrow(BB))[row]
# if we have not enough row then compress B
if(nrow(BB) > ncol(BB)){
ind_row <- ind_row[1:(ncol(BB)+1)]
BB      <- BB[1:(ncol(BB)+1),]
}else{
ind_col <- ind_col[1:(length(ind_row)-1)]
BB      <- BB[,1:length(ind_row)-1]
}
# recompute
sums_col <- colSums(BB)
}
return(list(B = BB, ind_col = ind_col, ind_row = ind_row))
}
ReducedMatrix(B)
ReducedMatrix <- function(B){
EPS      <- 1e-8
sums_col <- colSums(B)
sums_row <- rowSums(B)
BB       <- B
# loop while any colsums equal to 0 exists
while(any(sums_col < abs(EPS))){
# extract columns with sum larger than 0
col <- which(sums_col > abs(EPS))
if(length(col) <= 1){ break }
BB      <- BB[,col]
ind_col <- (1:ncol(B))[col]
# extract rows with sum larger than 0
sums_row <- rowSums(BB)
row      <- which(sums_row > abs(EPS))
if(length(row) <= 1){ break }
BB       <- BB[row,]
ind_row  <- (1:nrow(B))[row]
# if we have not enough row then compress B
if(nrow(BB) > ncol(BB)){
ind_row <- ind_row[1:(ncol(BB)+1)]
BB      <- BB[1:(ncol(BB)+1),]
}else{
ind_col <- ind_col[1:(length(ind_row)-1)]
BB      <- BB[,1:length(ind_row)-1]
}
# recompute
sums_col <- colSums(BB)
}
return(list(B = BB, ind_col = ind_col, ind_row = ind_row))
}
ReducedMatrix(B)
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
?flightphasecube
fastflightcube
?fastflightcube
?flightphase
roxygen2::roxygenise()
devtools::build_manual()
set.seed(1)
## Matrix of 8 auxilary variables and 10 units with lot of 0s ##
X   <- matrix(sample(c(0,0,0,1),80,replace=TRUE), nrow = 10, ncol =  8)
## Inclusion probabilities with 10 units ##
pik <- runif(10)
## Cube method ##
ReducedSamplecube(X, pik, order = 2, method = 2)
roxygen2::roxygenise()
devtools::build_manual()
?samplecube
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
?dist
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
roxygen2::roxygenise()
?landingphase
roxygen2::roxygenise()
devtools::check()
?samplecube
devtools::check()
roxygen2::roxygenise()
devtools::check()
coord <- matrix(c(0.5,0.6,0.2,0.3,0.8,0.9,0.4,0.7), ncol=2)
pik <- matrix(c(0.6,0.3,0.3,
0.2,0.4,0.9,
0.3,0.2,0.5,
0.9,0.1,0.3), ncol = 3, byrow = TRUE)
## ORSP method ##
Orsp(pik, coord, EPS = 1e-6)
pik
coord
N <- nrow(pik)
t <- ncol(pik)
if(comment){ cat("\n\nBeginning of the ORSP method.\n--------------------------------")}
comment = TRUE
if(comment){ cat("\n\nBeginning of the ORSP method.\n--------------------------------")}
j <- 1
if(comment){
cat("\n- Time number",j)
start_time <- Sys.time()
}
s      <- rep(0,N)
lpm    <- BalancedSampling::lpm1(pik[,j], coord)
s[lpm] <- 1
for(k in 1:N){
choice     <- s[k]
pik        <- pik[k,j:t]
A          <- SystematicDesign(pik)
S          <- A$samples
p          <- A$probas
S1         <- matrix(S[S[,1]== choice, ], ncol = ncol(S))
p1         <- p[S[,1] == choice]/sum(p[S[,1] == choice])
pik[k,j:t] <- c(t(S1)%*%p1)
}
k <- 1
choice     <- s[k]
choice
s
pik        <- pik[k,j:t]
j
t
pik
pik <- matrix(c(0.6,0.3,0.3,
0.2,0.4,0.9,
0.3,0.2,0.5,
0.9,0.1,0.3), ncol = 3, byrow = TRUE)
pik        <- pik[k,j:t]
pik
A          <- SystematicDesign(pik)
A
S          <- A$samples
p          <- A$probas
S1         <- matrix(S[S[,1]== choice, ], ncol = ncol(S))
p1         <- p[S[,1] == choice]/sum(p[S[,1] == choice])
S1
p1
S
S[,1]== choice
S[S[,1]== choice, ]
p[S[,1] == choice]
p
t(S1)
p1
t(S1)%*%p1
c(t(S1)%*%p1)
pik[k,j:t]
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
library(usethis)
use_readme_rmd()
install.packages('git2r')
library(usethis)
use_readme_rmd()
install.packages('whisker')
use_readme_rmd()
setseed(1)
?setseed
library(SpotSampling)
setseed(1)
library(SpotSampling)
N <- 20
T <- 5
Z <- cbind(runif(N), runif(N))
library(SpotSampling)
N <- 20
T <- 5
Z <- cbind(runif(N), runif(N))
head(Z,5)
Z <- cbind(X = runif(N), Y = runif(N))
library(SpotSampling)
N <- 20
T <- 5
Z <- cbind(X = runif(N), Y = runif(N))
head(Z,5)
0.2*20
library(SpotSampling)
N     <- 20
T     <- 5
coord <- cbind(X = runif(N), Y = runif(N))
head(coord,5)
pik <- cbind(t1 = rep(0.2, N), t2 = runif(N), t3 = runif(N))
head(pik,5)
pik <- cbind(t1 = rep(0.2, N), t2 = runif(N), t3 = runif(N))
head(pik,5)
S <- Spot(pik = pik, coord = coord)
S <- Spot(pik = matrix(pik), coord = matrix(coord))
S <- Spot(pik = pik, coord = coord)
S <- Spot(pik = pik, coord = coord)
library(ggplot2)
ggplot() +
geom_point(data = data.frame(x = coord[,1],y = coord[,2]),
aes(x = x,y = y),
shape = 1,
alpha = 0.2)+
geom_point(data = data.frame(x = coord[S == 1,1],y = coord[S == 1,2]),
aes(x,y),
shape = 16,
colour = "blue")+
theme_void()
S <- Spot(pik = pik, coord = coord)
head(S)
S <- Spot(pik = pik, coord = coord)
nrow(S)
pik <- cbind(t1 = rep(0.2, N), t2 = runif(N), t3 = runif(N))
head(pik,5)
S <- Spot(pik = pik, coord = coord)
nrow(S)
coord
coord[,1*]
coord[,1]
library(ggplot2)
ggplot() +
geom_point(data = data.frame(x = coord[,1],y = coord[,2]),
aes(x = x,y = y),
shape = 1,
alpha = 0.2)+
geom_point(data = data.frame(x = coord[S == 1,1],y = coord[S == 1,2]),
aes(x,y),
shape = 16,
colour = "blue")+
theme_void()
coord
coord[S == 1,1]
S == 1
library(ggplot2)
t <- 1
ggplot() +
geom_point(data = data.frame(x = coord[,1],y = coord[,2]),
aes(x = x,y = y),
shape = 1,
alpha = 0.2)+
geom_point(data = data.frame(x = coord[S[,t] == 1,1],y = coord[S[,t] == 1,2]),
aes(x,y),
shape = 16,
colour = "blue")+
theme_void()
install.packages('labelling')
install.packages('labeling')
library(ggplot2)
t <- 1
ggplot() +
geom_point(data = data.frame(x = coord[,1],y = coord[,2]),
aes(x = x,y = y),
shape = 1,
alpha = 0.2)+
geom_point(data = data.frame(x = coord[S[,t] == 1,1],y = coord[S[,t] == 1,2]),
aes(x,y),
shape = 16,
colour = "blue")+
theme_void()
library(SpotSampling)
N     <- 40
T     <- 3
coord <- cbind(X = runif(N), Y = runif(N))
head(coord,5)
pik <- cbind(t1 = rep(0.2, N), t2 = runif(N), t3 = runif(N))
head(pik,5)
S <- Spot(pik = pik, coord = coord)
nrow(S)
library(ggplot2)
t <- 1
ggplot() +
geom_point(data = data.frame(x = coord[,1],y = coord[,2]),
aes(x = x,y = y),
shape = 1,
alpha = 0.2)+
geom_point(data = data.frame(x = coord[S[,t] == 1,1],y = coord[S[,t] == 1,2]),
aes(x,y),
shape = 16,
colour = "blue")+
theme_void()
coord <- matrix(runif(10*2), ncol=2)
## Temporal inclusion probabilities with 3 waves and 4 units ##
pik <- matrix(rep(0.2,10*3), ncol = 3, byrow = TRUE)
## Spot method to obtain temporal samples ##
S <- Spot(pik, coord)
devtools::load_all()
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
Spread(S, pik, coord, criteria = 'IB')
N       <- nrow(pik)
t       <- ncol(pik)
measure <- rep(0,t)
Spread <- function(S, pik, coord, criteria)
{
N       <- nrow(pik)
t       <- ncol(pik)
measure <- rep(0,t)
for(i in 1:t){
if(criteria == 'IB'){
m.strat    <- as.vector(WaveSampling::wpik(X = coord, pik = pik[,i]))
m.strat    <- m.strat-diag(diag(m.strat), nrow = nrow(m.strat), ncol = ncol(m.strat))
measure[i] <- IB(W = m.strat, s = S[,i])
}else{
if(criteria == 'sb'){
measure[i] <- sb(pik[,i], coord, (1:N)[S[,i]==1])
}
}
}
return(measure)
}
Spread(S, pik, coord, criteria = 'IB')
Spread <- function(S, pik, coord, criteria)
{
N       <- nrow(pik)
t       <- ncol(pik)
measure <- rep(0,t)
for(i in 1:t){
if(criteria == 'IB'){
m.strat    <- as.matrix(WaveSampling::wpik(X = coord, pik = pik[,i]))
m.strat    <- m.strat-diag(diag(m.strat), nrow = nrow(m.strat), ncol = ncol(m.strat))
measure[i] <- IB(W = m.strat, s = S[,i])
}else{
if(criteria == 'sb'){
measure[i] <- sb(pik[,i], coord, (1:N)[S[,i]==1])
}
}
}
return(measure)
}
Spread(S, pik, coord, criteria = 'IB')
Spread(S, pik, coord, criteria = 'IB')
devtools::load_all(".")
Spread(S, pik, coord, criteria = 'IB')
SpotSampling::Spread(S, pik, coord, criteria = 'IB')
Spread <- function(S, pik, coord, criteria)
{
N       <- nrow(pik)
t       <- ncol(pik)
measure <- rep(0,t)
for(i in 1:t){
if(criteria == 'IB'){
m.strat    <- WaveSampling::wpik(X = coord, pik = pik[,i])
m.strat    <- as.matrix(m.strat)
m.strat    <- m.strat-diag(diag(m.strat), nrow = nrow(m.strat), ncol = ncol(m.strat))
measure[i] <- WaveSampling::IB(W = m.strat, s = S[,i])
}else{
if(criteria == 'sb'){
measure[i] <- BalancedSampling::sb(pik[,i], coord, (1:N)[S[,i]==1])
}
}
}
return(measure)
}
SpotSampling::Spread(S, pik, coord, criteria = 'IB')
Spread <- function(S, pik, coord, criteria)
{
N       <- nrow(pik)
t       <- ncol(pik)
measure <- rep(0,t)
for(i in 1:t){
if(criteria == 'IB'){
m.strat    <- WaveSampling::wpik(X = coord, pik = pik[,i])
m.strat    <- as.matrix(m.strat)
m.strat    <- m.strat-diag(diag(m.strat), nrow = nrow(m.strat), ncol = ncol(m.strat))
measure[i] <- WaveSampling::IB(W = m.strat, s = S[,i])
}else{
if(criteria == 'sb'){
measure[i] <- BalancedSampling::sb(pik[,i], coord, (1:N)[S[,i]==1])
}
}
}
return(measure)
}
?IB
devtools::load_all(".")
SpotSampling::Spread(S, pik, coord, criteria = 'IB')
